#!/usr/bin/python

#
# Monitor SSH auth logs, and the ASA's VPN log for successful logins; On successful login,
# check whether the IP is already trusted. Trusted IPs stored via pythons Pickle module,
# inside /usr/local/lib/obj/ssh_whitelist.pkl.
#
#
#
# 
# Options:
#
#	-q,--quiet	Suppress output if origin is trusted.
#
#	-f,--file	File to parse
#
#	-a,--append	Append single CSV entry denoting source,user,destination to whitelist then exit.
#
#	-P,--Print	Print whitelist then quit (whitelist stored in dictionary of lists format)
#

import pprint
import datetime
import argparse
import regex
import re
import GeoIP
import pickle


parser = argparse.ArgumentParser(description="Scream when new IPs are seen SSH'ing.")
parser.add_argument('-f', '--file', help='File to inspect')
parser.add_argument('-q', '--quiet', action='store_true', help="Ignore trusted IPs")
parser.add_argument('-a', '--append', help='Append single CSV entry '
			'to whitelist then exit. (Input is the same format as generated by -f output: "source,user,destination").' )


parser.add_argument('-P', '--Print', action='store_true', help='Print current whitelist then quit.')
args=parser.parse_args()

gi = GeoIP.open("/usr/local/lib/GeoLiteCity.dat", GeoIP.GEOIP_STANDARD)


#ghetto workaround for variable space padding in syslogs
yesterday=datetime.date.today()-datetime.timedelta(1)
yest0=yesterday.strftime("%b%e")
yest1=yesterday.strftime("%b %e")
yest2=yesterday.strftime("%b  %e")
yest3=yesterday.strftime("%b   %e")

#whitelist = {'ip', [associated user list] }

def convert_ip_to_city(ip):
	gir = gi.record_by_addr(ip)	
	if gir is not None:
		#print(gir['country_code'])
		#print(gir['country_code3'])
		#print(gir['country_name'])
		#print(gir['city'])
		#print(gir['region'])
		#print(gir['region_name'])
		#print(gir['postal_code'])
		#print(gir['latitude'])
		#print(gir['longitude'])
		#print(gir['area_code'])
		#print(gir['time_zone'])
		#print(gir['metro_code'])
		#print(str(gir))
		return gir['city'],gir['country_name']
	else:
		return ['Unknown origin,']

def save_obj(obj, name ):
	with open('/usr/local/lib/obj/'+ name + '.pkl', 'wb') as f:
		pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)

def load_obj(name ):
	with open('/usr/local/lib/obj/' + name + '.pkl', 'rb') as f:
		return pickle.load(f)

def extract_hostname(line):
	if type(line) is not str:
		raise TypeError('function extract_hostname requires string input')
		exit
	return re.search('([\w\.]+)( sshd)', line).group(1)

def extract_origin_ip(line):
	if type(line) is not str:
		raise TypeError('function extract_origin_ip requires string input')
		exit
	return re.search('(from )([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)', line).group(2)

def extract_user(line):
	if type(line) is not str:
		raise TypeError('function extract_user requires string input')
		exit
	return re.search('(Accepted [\w]+ for )([\w]+)',line).group(2)


def print_alert(source_user_dest,location_details,reputation):
	print source_user_dest+","+location_details+","+reputation

def extract_user_and_origin_ip(line):
	
	user=re.search('(.*<GroupPolicy1> User <)([\w\\\]+)(> IP <)([0-9\.]+)', line).group(2)
	origin= re.search('(.*<GroupPolicy1> User <)([\w\\\]+)(> IP <)([0-9\.]+)', line).group(4)
	return user, origin

def check_whitelist(ssh_whitelist,origin_host,target_user,target_ip):
	if origin_host in ssh_whitelist.keys():
		if target_user+","+target_ip not in ssh_whitelist[origin_host]:
			testlist=ssh_whitelist[origin_host]
			print_alert(source_user_dest,location_details,'GREYLIST')
		elif not args.quiet:
			print_alert(source_user_dest,location_details,'WHITELIST')
	elif origin_host not in ssh_whitelist.keys():
		print_alert(source_user_dest,location_details,'GREYLIST')




ssh_whitelist=load_obj('ssh_whitelist')

if args.Print:
	pp=pprint.PrettyPrinter(indent=4)
	pp.pprint(ssh_whitelist)
	exit()


if args.append:
        new_entry=args.append.split(",")
        #0=source,1=user,2=destination
        if not new_entry[0] in ssh_whitelist.keys():
                ssh_whitelist[str(new_entry[0])]=[]
                ssh_whitelist[str(new_entry[0])].append(str(new_entry[1])+","+str(new_entry[2]))
        else:
                if str(new_entry[1])+","+str(new_entry[2]) not in ssh_whitelist[str(new_entry[0])]:
                        ssh_whitelist[str(new_entry[0])].append(str(new_entry[1])+","+str(new_entry[2]))

	save_obj(ssh_whitelist,'ssh_whitelist')
	exit()
 
for line in open(args.file):

	line=str(line)
	if not any(x in line for x in [yest0,yest1,yest2,yest3]):
		continue

	if 'accepted password for' in line.lower() or 'accepted publickey for' in line.lower():
		target_ip=extract_hostname(line)

		origin_host=str(extract_origin_ip(line))
		target_user=extract_user(line)


		source_user_dest=origin_host+","+target_user+","+target_ip
		try:
			location_details=",".join(convert_ip_to_city(origin_host))
		except:
			location_details='unknown,unknown'

		check_whitelist(ssh_whitelist,origin_host,target_user,target_ip) 

	elif 'ASA-4-722051' in line:
		target_ip='VPN-Login'
                target_user,origin_host=extract_user_and_origin_ip(line)
                source_user_dest=origin_host+","+target_user+","+target_ip

                try:
                        location_details=",".join(convert_ip_to_city(origin_host))
                except:
			location_details='unknown,unknown'

                check_whitelist(ssh_whitelist,origin_host,target_user,target_ip)
